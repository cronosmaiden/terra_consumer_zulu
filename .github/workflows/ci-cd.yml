name: Terraform CI/CD - Phased Deployment

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  terraform:
    name: Terraform Plan & Apply in Phases
    runs-on: ubuntu-latest
    environment: dev  # Especificar el entorno "dev" para acceder a los secrets del entorno

    steps:
      # ----------------------------
      # Configuración Inicial
      # ----------------------------

      # 1. Clonar el repositorio
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Configurar Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.2

      # ----------------------------
      # Fase 1: Deploy de Lambda y API Gateway
      # ----------------------------

      - name: Terraform Init - Phase 1
        working-directory: ./phase1
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: terraform init

      - name: Terraform Validate - Phase 1
        working-directory: ./phase1
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: terraform validate

      - name: Terraform Plan - Phase 1
        working-directory: ./phase1
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: terraform plan -out=tfplan-phase1

      - name: Terraform Apply - Phase 1
        working-directory: ./phase1
        if: github.event_name == 'push'
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: terraform apply -auto-approve tfplan-phase1

      - name: Extract Outputs - Phase 1
        working-directory: ./phase1
        id: phase1_outputs
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          terraform output -json > phase1-outputs.json 2>/dev/null
        shell: bash

      # ----------------------------
      # Fase 2: Asociar el WAF al API Gateway
      # ----------------------------

      - name: Terraform Init - Phase 2
        working-directory: ./phase2
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: terraform init

      - name: Validate Phase 1 Outputs
        working-directory: ./phase1
        run: |
          if [ ! -s phase1-outputs.json ]; then
            echo "Error: phase1-outputs.json está vacío o no existe."
            exit 1
          fi

          if ! jq . phase1-outputs.json >/dev/null 2>&1; then
            echo "Error: phase1-outputs.json no contiene JSON válido."
            exit 1
          fi

          echo "Contenido de phase1-outputs.json:"
          cat phase1-outputs.json

      - name: Inject Phase 1 Outputs to Phase 2
        working-directory: ./phase2
        run: |
          # Verificar si el archivo existe y tiene contenido
          if [ ! -s ../phase1/phase1-outputs.json ]; then
            echo "Error: phase1-outputs.json está vacío o no existe."
            exit 1
          fi

          # Extraer valores del JSON con jq y manejar casos donde no haya valores válidos
          API_GATEWAY_STAGE_ARN=$(jq -r '.api_gateway_stage_arn.value // empty' ../phase1/phase1-outputs.json)
          API_GATEWAY_ID=$(jq -r '.api_gateway_id.value // empty' ../phase1/phase1-outputs.json)

          # Validar si los valores se extrajeron correctamente
          if [ -z "$API_GATEWAY_STAGE_ARN" ] || [ -z "$API_GATEWAY_ID" ]; then
            echo "Error: No se pudieron extraer todos los valores necesarios del archivo JSON."
            echo "Contenido del archivo JSON:"
            cat ../phase1/phase1-outputs.json
            exit 1
          fi

          # Crear terraform.auto.tfvars con los valores extraídos
          echo "api_gateway_stage_arn = \"$API_GATEWAY_STAGE_ARN\"" > terraform.auto.tfvars
          echo "api_gateway_id = \"$API_GATEWAY_ID\"" >> terraform.auto.tfvars

          # Mostrar el contenido del archivo generado para confirmación
          echo "Contenido de terraform.auto.tfvars:"
          cat terraform.auto.tfvars

      - name: Terraform Validate - Phase 2
        working-directory: ./phase2
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: terraform validate

      - name: Terraform Plan - Phase 2
        working-directory: ./phase2
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: terraform plan -out=tfplan-phase2

      - name: Terraform Apply - Phase 2
        working-directory: ./phase2
        if: github.event_name == 'push'
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: terraform apply -auto-approve tfplan-phase2
